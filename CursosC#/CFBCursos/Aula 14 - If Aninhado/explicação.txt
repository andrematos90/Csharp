o C# também oferece as declaraçõOs "ifs" aninhados, também conhecidos como estruturas condicionais aninhadas, referem-se à prática de colocar uma declaração "if" dentro de outra. Isso permite que você lide com múltiplas condições e cenários complexos de maneira mais específica. Ao usar "ifs" aninhados, você está essencialmente criando uma hierarquia de decisões, onde cada "if" interno só é avaliado se a condição do "if" externo for verdadeira.

Aqui está um exemplo de como os "ifs" aninhados funcionam em C#:

using System;

class Program
{
    static void Main()
    {
        int idade = 20;
        bool possuiCarteira = true;

        if (idade >= 18)
        {
            Console.WriteLine("Você é maior de idade.");

            if (possuiCarteira)
            {
                Console.WriteLine("E possui carteira de motorista.");
            }
            else
            {
                Console.WriteLine("Mas não possui carteira de motorista.");
            }
        }
        else
        {
            Console.WriteLine("Você é menor de idade.");
        }
    }
}



Neste exemplo, temos um cenário em que verificamos se uma pessoa é maior de idade e, se for o caso, também verificamos se ela possui uma carteira de motorista. Aqui estão os passos do fluxo de execução:

O primeiro "if" verifica se a idade é maior ou igual a 18. Como a idade é 20, a condição é verdadeira, e o código dentro deste "if" é executado.
Dentro do primeiro "if", há outro "if" aninhado que verifica se a pessoa possui uma carteira de motorista. A variável possuiCarteira é verdadeira, então o código dentro deste "if" interno é executado.
O resultado final é que o programa exibirá as mensagens "Você é maior de idade." e "E possui carteira de motorista."
É importante manter a organização e clareza ao usar "ifs" aninhados, pois quanto mais profundos forem os aninhamentos, mais difícil pode ser acompanhar a lógica do código. Certifique-se de utilizar uma formatação consistente, espaçamento adequado e comentários quando necessário para garantir que o código seja compreensível.